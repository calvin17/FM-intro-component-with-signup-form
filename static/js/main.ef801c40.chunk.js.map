{"version":3,"sources":["components/SignupForm.js","components/IntroPage.js","components/App.js","reportWebVitals.js","index.js"],"names":["SignupForm","useForm","register","errors","formState","handleSubmit","action","className","onSubmit","data","console","log","alert","type","placeholder","firstNameError","required","name","render","message","lastNameError","emailError","pattern","value","passwordError","href","IntroPage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"qQA+EeA,MA5Ef,WACE,MAIIC,cAHFC,EADF,EACEA,SACaC,EAFf,EAEEC,UAAaD,OACbE,EAHF,EAGEA,aAMF,OACE,uBAAMC,OAAO,IAAIC,UAAU,cAAcC,SAAUH,GALrD,SAA0BI,GACxBC,QAAQC,IAAIF,GACZG,MAAM,kCAGN,UACE,mCACEC,KAAK,OACLC,YAAY,aACZP,UAAS,qBAAgBJ,EAAOY,gBAAkB,UAC9Cb,EAAS,iBAAkB,CAAEc,SAAU,iCAE7C,cAAC,IAAD,CACEb,OAAQA,EACRc,KAAK,iBACLC,OAAQ,gBAAGC,EAAH,EAAGA,QAAH,OAAiB,mBAAGZ,UAAU,iCAAb,SAA+CY,OAE1E,mCACEN,KAAK,OACLC,YAAY,YACZP,UAAS,oBAAeJ,EAAOiB,eAAiB,UAC5ClB,EAAS,gBAAiB,CAAEc,SAAU,2BAE5C,cAAC,IAAD,CACEb,OAAQA,EACRc,KAAK,gBACLC,OAAQ,gBAAGC,EAAH,EAAGA,QAAH,OAAiB,mBAAGZ,UAAU,gCAAb,SAA8CY,OAEzE,mCACEN,KAAK,OACLC,YAAY,gBACZP,UAAS,gBAAWJ,EAAOkB,YAAc,UACrCnB,EAAS,aAAc,CACzBc,SAAU,yBACVM,QAAS,CACPC,MAAO,2CACPJ,QAAS,uCAIf,cAAC,IAAD,CACEhB,OAAQA,EACRc,KAAK,aACLC,OAAQ,gBAAGC,EAAH,EAAGA,QAAH,OAAiB,mBAAGZ,UAAU,4BAAb,SAA0CY,OAErE,mCACEN,KAAK,WACLC,YAAY,WACZP,UAAS,mBAAcJ,EAAOqB,eAAiB,UAC3CtB,EAAS,gBAAiB,CAAEc,SAAU,+BAE5C,cAAC,IAAD,CACEb,OAAQA,EACRc,KAAK,gBACLC,OAAQ,gBAAGC,EAAH,EAAGA,QAAH,OAAiB,mBAAGZ,UAAU,+BAAb,SAA6CY,OAExE,wBAAQN,KAAK,SAASN,UAAU,aAAhC,mCAGA,oBAAGA,UAAU,QAAb,4DAEE,oBAAGkB,KAAK,KAAKlB,UAAU,aAAvB,UACG,IADH,+BC/COmB,MArBf,WACE,OACE,sBAAKnB,UAAU,WAAf,UACE,yBAAQA,UAAU,gBAAlB,UACE,oBAAIA,UAAU,QAAd,8CACA,mBAAGA,UAAU,cAAb,wKAKF,sBAAKA,UAAU,aAAf,UACE,sBAAKA,UAAU,YAAf,UACE,sBAAMA,UAAU,kBAAhB,gCADF,WAGA,qBAAKA,UAAU,cAAf,mCAEF,cAAC,EAAD,QCPSoB,MARf,WACE,OACE,qBAAKpB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASnB,OACP,cAAC,IAAMoB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ef801c40.chunk.js","sourcesContent":["import { useForm } from \"react-hook-form\";\nimport { ErrorMessage } from \"@hookform/error-message\";\n\nfunction SignupForm() {\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n  } = useForm();\n  function handleValidation(data) {\n    console.log(data);\n    alert(\"successfully submitted form\");\n  }\n  return (\n    <form action=\"#\" className=\"signup-form\" onSubmit={handleSubmit(handleValidation)}>\n      <input\n        type=\"text\"\n        placeholder=\"First Name\"\n        className={`first-name ${errors.firstNameError && \"error\"}`}\n        {...register(\"firstNameError\", { required: \"First Name cannot be empty\" })}\n      />\n      <ErrorMessage\n        errors={errors}\n        name=\"firstNameError\"\n        render={({ message }) => <p className=\"first-name_error error-message\">{message}</p>}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Last Name\"\n        className={`last-name ${errors.lastNameError && \"error\"}`}\n        {...register(\"lastNameError\", { required: \"Last cannot be empty\" })}\n      />\n      <ErrorMessage\n        errors={errors}\n        name=\"lastNameError\"\n        render={({ message }) => <p className=\"last-name_error error-message\">{message}</p>}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Email Address\"\n        className={`email ${errors.emailError && \"error\"}`}\n        {...register(\"emailError\", {\n          required: \"E-mail cannot be empty\",\n          pattern: {\n            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n            message: \"Looks like this is not an email\",\n          },\n        })}\n      />\n      <ErrorMessage\n        errors={errors}\n        name=\"emailError\"\n        render={({ message }) => <p className=\"email_error error-message\">{message}</p>}\n      />\n      <input\n        type=\"password\"\n        placeholder=\"Password\"\n        className={`password ${errors.passwordError && \"error\"}`}\n        {...register(\"passwordError\", { required: \"Password cannot be empty\" })}\n      />\n      <ErrorMessage\n        errors={errors}\n        name=\"passwordError\"\n        render={({ message }) => <p className=\"password_error error-message\">{message}</p>}\n      />\n      <button type=\"submit\" className=\"signup-btn\">\n        Claim your free trial\n      </button>\n      <p className=\"terms\">\n        By clicking the button, you are agreeing to our\n        <a href=\"/#\" className=\"terms-link\">\n          {\" \"}\n          Terms and Services\n        </a>\n      </p>\n    </form>\n  );\n}\n\nexport default SignupForm;\n","import SignupForm from \"./SignupForm\";\r\n\r\nfunction IntroPage() {\r\n  return (\r\n    <div className=\"continer\">\r\n      <header className=\"intro-content\">\r\n        <h1 className=\"title\">Learn to code by watching others</h1>\r\n        <p className=\"discription\">\r\n          See how experienced developers solve problems in real-time. Watching scripted tutorials is great,\r\n          but understanding how developers think is invaluable.\r\n        </p>\r\n      </header>\r\n      <div className=\"price-info\">\r\n        <div className=\"trial-day\">\r\n          <span className=\"day-highlighter\">Try it free 7 days</span> then\r\n        </div>\r\n        <div className=\"trial-price\">$20/mo. thereafter</div>\r\n      </div>\r\n      <SignupForm />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default IntroPage;\r\n","import \"../assets/scss/main.scss\";\nimport IntroPage from \"./IntroPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <IntroPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}